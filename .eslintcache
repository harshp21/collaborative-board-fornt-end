[{"D:\\workspace\\hackathon\\collaborative-drawing-front-end\\src\\index.js":"1","D:\\workspace\\hackathon\\collaborative-drawing-front-end\\src\\reportWebVitals.js":"2","D:\\workspace\\hackathon\\collaborative-drawing-front-end\\src\\App.js":"3","D:\\workspace\\hackathon\\collaborative-drawing-front-end\\src\\components\\board-container\\board-container.component.js":"4","D:\\workspace\\hackathon\\collaborative-drawing-front-end\\src\\components\\board\\board.component.js":"5","D:\\workspace\\hackathon\\collaborative-drawing-front-end\\src\\components\\board-config\\board-config.component.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":204,"mtime":1610619699466,"results":"10","hashOfConfig":"8"},{"size":411,"mtime":1610616095298,"results":"11","hashOfConfig":"8"},{"size":3924,"mtime":1610621015712,"results":"12","hashOfConfig":"8"},{"size":619,"mtime":1610620976932,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"135wm6e",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"D:\\workspace\\hackathon\\collaborative-drawing-front-end\\src\\index.js",[],["30","31"],"D:\\workspace\\hackathon\\collaborative-drawing-front-end\\src\\reportWebVitals.js",[],"D:\\workspace\\hackathon\\collaborative-drawing-front-end\\src\\App.js",[],"D:\\workspace\\hackathon\\collaborative-drawing-front-end\\src\\components\\board-container\\board-container.component.js",["32"],"import React, { Component } from 'react';\r\nimport { Board } from '../board/board.component';\r\nimport './board-container.css';\r\n\r\nclass BoardContainer extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            < div className=\"container\" >\r\n                <Board></Board>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport { BoardContainer };","D:\\workspace\\hackathon\\collaborative-drawing-front-end\\src\\components\\board\\board.component.js",["33","34"],"import React, { Component } from 'react';\r\nimport './board.css';\r\nimport io from 'socket.io-client';\r\nimport { BoardConfig } from '../board-config/board-config.component';\r\n\r\nclass Board extends Component {\r\n\r\n    socket = io(\"http://localhost:5000\", { transport: ['websocket'] });\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.drawOnCanvas();\r\n        this.renderCanvas(localStorage.getItem('myCanvas'));\r\n        this.socket.on('canvas-data', (data) => {\r\n            this.renderCanvas(data);\r\n        })\r\n    }\r\n\r\n    // render canvas\r\n    renderCanvas = (data) => {\r\n        let canvas = document.getElementById('board');\r\n        let img = new Image;\r\n        img.onload = function () {\r\n            let ctx = canvas.getContext('2d');\r\n            ctx.drawImage(img, 0, 0);\r\n        }\r\n        img.src = data;\r\n    }\r\n\r\n    // draw on canvas\r\n    drawOnCanvas = () => {\r\n        let canvas = document.getElementById('board');\r\n        let sketch = document.getElementById('sketch');\r\n\r\n        // getting context of canvas\r\n        let ctx = canvas.getContext('2d');\r\n\r\n        // computing width and height on basis of parent element\r\n        let sketch_style = getComputedStyle(sketch);\r\n        canvas.width = parseInt(sketch_style.getPropertyValue('width'));\r\n        canvas.height = parseInt(sketch_style.getPropertyValue('height'));\r\n\r\n        // initial values \r\n        let mouse = { x: 0, y: 0 };\r\n        let last_mouse = { x: 0, y: 0 };\r\n        ctx.lineWidth = 5;\r\n        ctx.lineJoin = 'round';\r\n        ctx.lineCap = 'round';\r\n        ctx.strokeStyle = 'black';\r\n\r\n        // Mouse Capturing last poition and current position \r\n        canvas.addEventListener('mousemove', function (e) {\r\n            last_mouse.x = mouse.x;\r\n            last_mouse.y = mouse.y;\r\n\r\n            mouse.x = e.pageX - this.offsetLeft;\r\n            mouse.y = e.pageY - this.offsetTop;\r\n        }, false);\r\n\r\n        // add a mousemove listener to paint on click of the mouse btn using mouse down\r\n        canvas.addEventListener('mousedown', function (e) {\r\n            canvas.addEventListener('mousemove', onPaint, false);\r\n        }, false);\r\n\r\n        // remove a mousemove listener to paint when the mouse btn is removed\r\n        canvas.addEventListener('mouseup', function () {\r\n            canvas.removeEventListener('mousemove', onPaint, false);\r\n        }, false);\r\n\r\n\r\n        // draw the line on basis of the co-ordinates calculated on mousemove event \r\n        let onPaint = () => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(last_mouse.x, last_mouse.y);\r\n            ctx.lineTo(mouse.x, mouse.y);\r\n            ctx.closePath();\r\n            ctx.stroke();\r\n\r\n            // add the canvas and selected color in local storage to maintain state on refresh\r\n            localStorage.setItem('myCanvas', canvas.toDataURL('image/png', 1));\r\n            this.socket.emit('canvas-data', canvas.toDataURL('image/png', 1));\r\n        };\r\n\r\n    }\r\n\r\n    clearBtnHandler = () => {\r\n        let canvas = document.getElementById('board');\r\n        localStorage.removeItem('myCanvas');\r\n        const context = canvas.getContext('2d');\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n        this.socket.emit('canvas-data', canvas.toDataURL('image/png', 1));\r\n    }\r\n\r\n    colorChangeHandler = (event) => {\r\n        document.getElementById('board').getContext('2d').strokeStyle = event.target.value;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <BoardConfig clearBtnHandler={this.clearBtnHandler} colorChangeHandler={this.colorChangeHandler} />\r\n                <div className=\"board-container\">\r\n                    <div className=\"sketch\" id=\"sketch\">\r\n                        <canvas id=\"board\"></canvas>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport { Board };","D:\\workspace\\hackathon\\collaborative-drawing-front-end\\src\\components\\board-config\\board-config.component.js",["35"],"import React, { Component } from 'react';\r\nimport './board-config.css';\r\n\r\nclass BoardConfig extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"board-config\">\r\n                <div className=\"clear-btn\" onClick={this.props.clearBtnHandler}>\r\n                    clear\r\n                    </div>\r\n                <div className=\"color-picker-container\">\r\n                    <input type=\"color\" onChange={this.props.colorChangeHandler} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport { BoardConfig }",{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":7,"column":5,"nodeType":"42","messageId":"43","endLine":9,"endColumn":6},{"ruleId":"40","severity":1,"message":"41","line":10,"column":5,"nodeType":"42","messageId":"43","endLine":12,"endColumn":6},{"ruleId":"44","severity":1,"message":"45","line":25,"column":19,"nodeType":"46","messageId":"47","endLine":25,"endColumn":28,"fix":"48"},{"ruleId":"40","severity":1,"message":"41","line":5,"column":5,"nodeType":"42","messageId":"43","endLine":7,"endColumn":6},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"51","text":"52"},"no-global-assign","no-unsafe-negation",[709,709],"()"]